#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct  4 15:51:28 2017

@author: elijahbarnes with Zac Rose and Maxwell Levin
"""

import numpy.linalg as npl
import numpy as np
import pylab as py
H_nm = np.empty([100,100],float)
pi = np.pi
h_bar = (6.6e-34)/(2*pi)
a = 1.6e-18
m_e = 9.1e-31
L = 5e-10
e = 1.6e-19

def V(x):
    return a*x/L

def All(n,m,x):
    return (2/L)*(np.sin(m*pi*x/L))*((h_bar*h_bar*pi*pi*n*n/(L*L*2*m_e))*np.sin(n*pi*x/L)+V(x)*np.sin(n*pi*x/L))
    
    
def S(n,m,N):
    N = int(N)
    h = L/N
    S = All(n,m,0)+All(n,m,L)
    
    for k in range (1,N,2):
        S+= 4*All(n,m,0+k*h)

    for k in range (2,N-1,2):
        S+= 2*All(n,m,0+k*h)
      
        
    return (h/3)*S 


    #for the range only from (0,10) the eigenenergies are very similar
for m in range (0,100):
    for n in range (0,100):
        H_nm[m,n] = S(n+1,m+1,200)

E,V_E = npl.eigh(H_nm)
E=E/e

def Psi_1(x,n):
    psi1 = 0
    for q in range(0,100):
        psi1+=np.sin((q+1)*pi*x/L)*V_E[0][q]
    return (2/L)*(psi1**2)
def Psi_2(x,n):
    psi2 = 0
    for q in range(0,100):
        psi2+=np.sin((q+1)*pi*x/L)*V_E[1][q]
    return (2/L)*(psi2**2)
def Psi_3(x,n):
    psi3 = 0
    for q in range(0,100):
        psi3+=np.sin((q+1)*pi*x/L)*V_E[2][q]
    return (2/L)*(psi3**2)
#for the range only from (0,10) the eigenenergies are very similar
x = np.linspace(0,L,100)


py.plot(x,Psi_1(x,100))
py.plot(x,Psi_2(x,100))
py.plot(x,Psi_3(x,100))
py.show()



