#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov  7 15:54:37 2017

@author: elijahbarnes
"""

import numpy as np
import pylab as py
import multiprocessing
import time
import math as math

a = 0
b = 200
h = .01
pi = np.pi
g = 9.8
L = 9.8
Omega = 2/3
q = 1/2
E = 1e-6
m = 1
theta = .2
theta_2 = .2 + E
omega = 0
omega_2 = 0
t_pts = np.arange(a,b,h)
theta_pts = []
omega_pts = []

def Bif(F_d):
    def F_1(theta,omega,t):
        return omega
    def F_2(theta,omega,t):
        return (-g/L)*np.sin(theta)-q*omega+F_d*np.sin(Omega*t)
    
    a = 0
    b = 200
    h = .01
    pi = np.pi
    g = 9.8
    L = 9.8
    Omega = 2/3
    q = 1/2
    t_pts = np.arange(a,b,h)
    
    def Runge(theta):
        theta_pts = []
        omega_pts = []
        omega = 0
        for t in t_pts:
           k1 = h*F_1(theta,omega,t)
           l1 = h*F_2(theta,omega,t)
           k2 = h*F_1(theta+k1/2,omega+l1/2,t+h/2)
           l2 = h*F_2(theta+k1/2,omega+l1/2,t+h/2)
           k3 = h*F_1(theta+k2/2,omega+l2/2,t+h/2)
           l3 = h*F_2(theta+k2/2,omega+l2/2,t+h/2)
           k4 = h*F_1(theta+k3,omega+l3,t+h)
           l4 = h*F_2(theta+k3,omega+l3,t+h)
           
           theta+= (k1+2*k2+2*k3+k4)/6
           omega+= (l1+2*l2+2*l3+l4)/6
           
           if theta < -np.pi:
                theta = theta + 2*np.pi
           if theta > np.pi:
                theta = theta-2*np.pi
                
           if np.abs(Omega*t/(2*pi)-math.floor(Omega*t/(2*pi)))< h/10:
                if t>100:
                    theta_pts.append (theta)
                    omega_pts.append (omega)
        return np.array(theta_pts)
    return Runge(.2)

if __name__ == '__main__':
    print(multiprocessing.cpu_count())
    t_start = time.time()
    Force_entries = np.linspace(0,1.6,1000)
    cores = multiprocessing.Pool()
    results = cores.map(Bif, Force_entries)
    cores.close()
    cores.join()
    print("This took {} seconds".format(time.time() - t_start))

x = Force_entries
y = results
py.plot (x,y,"k.",ms=2)
           
                    